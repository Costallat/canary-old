---

name: Build on Windows

on: [push, pull_request]

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        buildtype: [Debug, Release]
        include:
          - os: windows-latest
            triplet: x64-windows
            packages: >
              boost-asio boost-iostreams boost-system boost-filesystem
              boost-variant boost-lockfree cryptopp curl jsoncpp
              luajit libmariadb pugixml spdlog

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

      - name: Windows - remove C:/mysql*
        run: rm -r -fo C:/mysql-5.7.21-winx64
        if: contains( matrix.os, 'windows')

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          additionalCachedPaths: ${{ github.workspace }}/build/vcpkg_installed
          vcpkgGitCommitId: b9cd2a7958dec657fb869ec487d2a98cf39a8d48

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest

      - name: Run CMake to install the dependencies specified in the vcpkg.json manifest, generate project file and build the project
        uses: lukka/run-cmake@v3
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildDirectory: ${{ github.workspace }}/build
          useVcpkgToolchainFile: true
          buildWithCMake: true

      - name: Copy artifacts
        shell: pwsh
        run: |
          Copy-Item -Path ${{ github.workspace }}\build\bin\* -Destination ${{ github.workspace }} -Recurse

      - name: Create and Upload Full Datapack
        uses: actions/upload-artifact@v2
        with:
          name: canary-full-${{ matrix.os }}-${{ matrix.buildtype }}-${{ steps.gitversion.outputs.semVer }}
          path: |
            ${{ github.workspace }}
            !${{ github.workspace }}/build/
            !${{ github.workspace }}/vcpkg/
            !${{ github.workspace }}/.git/
            !${{ github.workspace }}/.github/
            !${{ github.workspace }}/.appveyor.yml
            !${{ github.workspace }}/.editorconfig
            !${{ github.workspace }}/.gitignore
            !${{ github.workspace }}/.reviewdog.yml
            !${{ github.workspace }}/.travis.yml
            !${{ github.workspace }}/tests/
            !${{ github.workspace }}/cmake/
            !${{ github.workspace }}/sonar-project.properties
            !${{ github.workspace }}/Jenkinsfile
            !${{ github.workspace }}/GitVersion.yml

      - name: Create and Upload Server Only
        uses: actions/upload-artifact@v2
        with:
          name: canary-server-only-${{ matrix.os }}-${{ matrix.buildtype }}-${{ steps.gitversion.outputs.semVer }}
          path: |
            ${{ github.workspace }}/build/bin/
